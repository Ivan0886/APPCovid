Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.appcovid\">\r\n\r\n    <uses-permission-sdk-23 android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n    <!-- Los permisos de ACCESS_COARSE_LOCATION/ACCESS_FINE_LOCATION no son requeridos para el uso\r\n    de Google Maps Android API v2, aunque se recomiendan. -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n\r\n        <uses-library android:name=\"org.apache.http.legacy\" android:required=\"false\"/>\r\n\r\n        <activity android:name=\".views.RestrictionsActivity\" />\r\n        <activity android:name=\".views.NewsActivity\" />\r\n        <activity android:name=\".views.StateActivity\" />\r\n        <activity android:name=\".views.MainActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 5aa5a294a9a0fc1e204e077de7a61d4fbd1fb617)
+++ app/src/main/AndroidManifest.xml	(date 1621068138211)
@@ -1,14 +1,14 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.example.appcovid">
-
     <uses-permission-sdk-23 android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.BLUETOOTH" />
     <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
     <!-- Los permisos de ACCESS_COARSE_LOCATION/ACCESS_FINE_LOCATION no son requeridos para el uso
     de Google Maps Android API v2, aunque se recomiendan. -->
-    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
-    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
     <application
         android:allowBackup="true"
@@ -18,7 +18,11 @@
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
 
-        <uses-library android:name="org.apache.http.legacy" android:required="false"/>
+        <meta-data
+            android:name="com.google.android.nearby.messages.API_KEY"
+            android:value="AIzaSyCmjtVQfO7DvZzoZhc6ffYdByAeITZZi1I" />
+
+        <uses-library android:name="org.apache.http.legacy" android:required="false" />
 
         <activity android:name=".views.RestrictionsActivity" />
         <activity android:name=".views.NewsActivity" />
Index: app/src/main/java/com/example/appcovid/views/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appcovid.views;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothDevice;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport com.example.appcovid.R;\r\nimport com.example.appcovid.controller.BluetoothReceiver;\r\nimport com.example.appcovid.model.DeviceList;\r\n\r\nimport java.net.NetworkInterface;\r\nimport java.net.SocketException;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    private int mTituloBT, mTextoBT, mTextoBTError;\r\n    private BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\r\n    private BluetoothReceiver mBluetoothReceiver;\r\n    public static int REQUEST_BLUETOOTH = 1;\r\n    private DeviceList mDeviceList;\r\n    private static final int mBluetoothRequestCode = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mierda();\r\n\r\n        mTituloBT = R.string.main_dialog_titleBT;\r\n        mTextoBT = R.string.main_dialog_textBT;\r\n        mTextoBTError = R.string.main_dialog_textBTError;\r\n\r\n        mBluetoothReceiver = new BluetoothReceiver();\r\n\r\n        // Se comprueba si la ID del dispositivo ya se ha guardado\r\n        /*if (!mPreferences.contains(\"confirmacionID\")) {\r\n            lanzarAlert(mTituloID, mTextoID);\r\n        }*/\r\n\r\n        // Se comprueba si el Bluetooth está activado o esta soportado por el dispositivo\r\n        if (mBluetoothAdapter != null) {\r\n            if(!mBluetoothAdapter.isEnabled()) {\r\n                lanzarAlert(mTituloBT, mTextoBT);\r\n            }\r\n\r\n            IntentFilter filtro = new IntentFilter(BluetoothDevice.ACTION_FOUND);\r\n\r\n            mDeviceList = new DeviceList(mBluetoothAdapter);\r\n            registerReceiver(mDeviceList.bReciever, filtro);\r\n\r\n            mBluetoothAdapter.startDiscovery();\r\n\r\n            //Se informa al usuario que el dispositivo se va a abrir a ser descubierto por otros\r\n            //Si la longitud del extra se pone a 0, el dispositivo siempre se podrá descubrir\r\n            Intent discoverableIntent =\r\n                    new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);\r\n            discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 0);\r\n            startActivity(discoverableIntent);\r\n\r\n\r\n            // Intent que lanza la función onReceive del receiver, donde realizaremos el tratamiento\r\n            // de los datos*/\r\n        } else {\r\n            lanzarAlert(mTituloBT, mTextoBTError);\r\n        }\r\n    }\r\n\r\n    private void lanzarAlert(int titulo, int texto) {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(getString(titulo));\r\n        builder.setMessage(getString(texto));\r\n        builder.setNegativeButton(R.string.text_no, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n                finish();\r\n            }\r\n        });\r\n\r\n\r\n        builder.setPositiveButton(R.string.text_ok, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                if(texto == mTextoBTError) {\r\n                    dialog.dismiss();\r\n                    finish();\r\n                } else {\r\n                    Intent enableBT = new Intent(mBluetoothAdapter.ACTION_REQUEST_ENABLE);\r\n                    startActivityForResult(enableBT, REQUEST_BLUETOOTH);\r\n                    dialog.dismiss();\r\n                }\r\n            }\r\n        });\r\n        builder.create().show();\r\n    }\r\n\r\n\r\n    public void onClickLanzarActivity(View v) {\r\n        int id = v.getId();\r\n\r\n        switch(id) {\r\n            case R.id.button_news:\r\n                startActivity(new Intent(this, NewsActivity.class));\r\n                break;\r\n            case R.id.button_restriction:\r\n                startActivity(new Intent(this, RestrictionsActivity.class));\r\n                break;\r\n            default:\r\n                startActivity(new Intent(this, StateActivity.class));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n\r\n        // TODO: Comprobar si al cerrar la app del todo se siguen registrando usuarios conectados\r\n        //unregisterReceiver(mBluetoothReceiver);\r\n    }\r\n\r\n    public void mierda() {\r\n        try {\r\n            List<NetworkInterface> networkInterfaceList = Collections.list(NetworkInterface.getNetworkInterfaces());\r\n            for (NetworkInterface networkInterface : networkInterfaceList) {\r\n                String MAC = android.provider.Settings.Secure.getString(this.getContentResolver(), \"bluetooth_address\");\r\n                Log.d(\"MIMAC\", MAC);\r\n                Log.d(\"MAC2\", networkInterface.getName());\r\n            }\r\n        } catch (\r\n                SocketException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/appcovid/views/MainActivity.java	(revision 5aa5a294a9a0fc1e204e077de7a61d4fbd1fb617)
+++ app/src/main/java/com/example/appcovid/views/MainActivity.java	(date 1621068328309)
@@ -9,17 +9,25 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.os.Bundle;
+import android.os.ParcelUuid;
+import android.provider.Settings;
 import android.util.Log;
 import android.view.View;
 
 import com.example.appcovid.R;
 import com.example.appcovid.controller.BluetoothReceiver;
 import com.example.appcovid.model.DeviceList;
+import com.google.android.gms.nearby.Nearby;
+import com.google.android.gms.nearby.messages.Message;
+import com.google.android.gms.nearby.messages.MessageListener;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.net.NetworkInterface;
 import java.net.SocketException;
 import java.util.Collections;
 import java.util.List;
+import java.util.UUID;
 
 public class MainActivity extends AppCompatActivity {
 
@@ -29,12 +37,35 @@
     public static int REQUEST_BLUETOOTH = 1;
     private DeviceList mDeviceList;
     private static final int mBluetoothRequestCode = 0;
+    private String mIDDevice;
+    private MessageListener mMessageListener;
+    private Message mMessage;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
-        mierda();
+
+        mIDDevice = Settings.Secure.getString(this.getContentResolver(), Settings.Secure.ANDROID_ID);
+
+
+        Log.d("MI PUTA MAC", getMacAddr());
+
+        /*mMessageListener = new MessageListener() {
+            @Override
+            public void onFound(Message message) {
+                Log.d("TAG", "Found message: " + new String(message.getContent()));
+            }
+
+            @Override
+            public void onLost(Message message) {
+                Log.d("TAG", "Lost sight of message: " + new String(message.getContent()));
+            }
+        };
+
+        mMessage = new Message(mIDDevice.getBytes());*/
+
+        // mierda();
 
         mTituloBT = R.string.main_dialog_titleBT;
         mTextoBT = R.string.main_dialog_textBT;
@@ -53,6 +84,32 @@
                 lanzarAlert(mTituloBT, mTextoBT);
             }
 
+            /**********************/
+
+            /*BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
+
+            Method getUuidsMethod = null;
+            try {
+                getUuidsMethod = BluetoothAdapter.class.getDeclaredMethod("getUuids", null);
+            } catch (NoSuchMethodException e) {
+                e.printStackTrace();
+            }
+
+            ParcelUuid[] uuids = new ParcelUuid[0];
+            try {
+                uuids = (ParcelUuid[]) getUuidsMethod.invoke(adapter, null);
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            } catch (InvocationTargetException e) {
+                e.printStackTrace();
+            }
+
+            for (ParcelUuid uuid: uuids) {
+                Log.d("MYID", uuid.getUuid().toString());
+            }*/
+
+            /**************************************/
+
             IntentFilter filtro = new IntentFilter(BluetoothDevice.ACTION_FOUND);
 
             mDeviceList = new DeviceList(mBluetoothAdapter);
@@ -60,6 +117,22 @@
 
             mBluetoothAdapter.startDiscovery();
 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
             //Se informa al usuario que el dispositivo se va a abrir a ser descubierto por otros
             //Si la longitud del extra se pone a 0, el dispositivo siempre se podrá descubrir
             Intent discoverableIntent =
@@ -75,6 +148,21 @@
         }
     }
 
+    /*@Override
+    public void onStart() {
+        super.onStart();
+        Nearby.getMessagesClient(this).publish(mMessage);
+        Log.d("Holaaaaaaaaa", new String(mMessage.getContent()));
+        //Nearby.getMessagesClient(this).subscribe(mMessageListener);
+    }
+
+    @Override
+    public void onStop() {
+        Nearby.getMessagesClient(this).unpublish(mMessage);
+        Nearby.getMessagesClient(this).unsubscribe(mMessageListener);
+        super.onStop();
+    }*/
+
     private void lanzarAlert(int titulo, int texto) {
         AlertDialog.Builder builder = new AlertDialog.Builder(this);
         builder.setTitle(getString(titulo));
@@ -128,18 +216,48 @@
         //unregisterReceiver(mBluetoothReceiver);
     }
 
-    public void mierda() {
+    /*public void mierda() {
         try {
             List<NetworkInterface> networkInterfaceList = Collections.list(NetworkInterface.getNetworkInterfaces());
             for (NetworkInterface networkInterface : networkInterfaceList) {
                 String MAC = android.provider.Settings.Secure.getString(this.getContentResolver(), "bluetooth_address");
-                Log.d("MIMAC", MAC);
+                // Log.d("MIMAC", MAC);
                 Log.d("MAC2", networkInterface.getName());
             }
         } catch (
                 SocketException e) {
             e.printStackTrace();
         }
+    }*/
+
+
+
+    public static String getMacAddr() {
+        Log.d("ME CAGO EN TO", "hola");
+        try {
+            List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());
+            Log.d("ME CAGO EN TO2", "hola2");
+            for (NetworkInterface nif : all) {
+                if (!nif.getName().equalsIgnoreCase("wlan0")) continue;
+
+                byte[] macBytes = nif.getHardwareAddress();
+                if (macBytes == null) {
+                    return "";
+                }
+
+                StringBuilder res1 = new StringBuilder();
+                for (byte b : macBytes) {
+                    res1.append(String.format("%02X:",b));
+                }
+
+                if (res1.length() > 0) {
+                    res1.deleteCharAt(res1.length() - 1);
+                }
+                return res1.toString();
+            }
+        } catch (Exception ex) {
+        }
+        return "02:00:00:00:00:00";
     }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/example/appcovid/model/DeviceItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appcovid.model;\r\n\r\nimport org.threeten.bp.LocalDate;\r\n\r\npublic class DeviceItem {\r\n\r\n    private String mAddress;\r\n    private boolean mConnected;\r\n    private LocalDate mFecha;\r\n\r\n    public DeviceItem(String mAddress, String mConnected) {\r\n        // this.mFecha = LocalDate.now();\r\n        this.mAddress = mAddress;\r\n        if (mConnected.equals(\"true\")) {\r\n            this.mConnected = true;\r\n        } else {\r\n            this.mConnected = false;\r\n        }\r\n    }\r\n\r\n    public boolean getmConnected() {\r\n        return mConnected;\r\n    }\r\n\r\n    public String getmAddress() {\r\n        return mAddress;\r\n    }\r\n\r\n    public LocalDate getmFecha() {\r\n        return mFecha;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/appcovid/model/DeviceItem.java	(revision 5aa5a294a9a0fc1e204e077de7a61d4fbd1fb617)
+++ app/src/main/java/com/example/appcovid/model/DeviceItem.java	(date 1620120148689)
@@ -29,4 +29,6 @@
     public LocalDate getmFecha() {
         return mFecha;
     }
+
+
 }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.appcovid\"\r\n        minSdkVersion 16\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        //multiDexEnabled true\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    /*packagingOptions {\r\n        exclude 'META-INF/DEPENDENCIES'\r\n        exclude 'META-INF/LICENSE'\r\n        exclude 'META-INF/LICENSE.txt'\r\n        exclude 'META-INF/license.txt'\r\n        exclude 'META-INF/NOTICE'\r\n        exclude 'META-INF/NOTICE.txt'\r\n        exclude 'META-INF/notice.txt'\r\n        exclude 'META-INF/ASL2.0'\r\n        exclude(\"META-INF/*.kotlin_module\")\r\n    }*/\r\n}\r\n\r\ndependencies {\r\n    // Import the Firebase BoM\r\n    implementation platform('com.google.firebase:firebase-bom:27.1.0')\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'com.google.firebase:firebase-database'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'\r\n    implementation 'com.jakewharton.threetenabp:threetenabp:1.3.0'\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:recyclerview-v7:28.0.0'\r\n    // Libreria retrofit, simpleXML y GSON\r\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\r\n    implementation 'com.squareup.retrofit2:converter-simplexml:2.6.1'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\r\n    // Libreria ciclos de vida\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.2.0'\r\n    // Libreria Picasso\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n    // Libreria lettuce para Redis\r\n    //implementation 'io.lettuce:lettuce-core:6.1.0.RELEASE'\r\n    // https://mvnrepository.com/artifact/redis.clients/jedis\r\n    implementation group: 'redis.clients', name: 'jedis', version: '3.5.2'\r\n    // Servicios Google\r\n    implementation 'com.google.android.gms:play-services-location:18.0.0'\r\n    //implementation 'androidx.multidex:multidex:2.0.1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 5aa5a294a9a0fc1e204e077de7a61d4fbd1fb617)
+++ app/build.gradle	(date 1621067908357)
@@ -66,6 +66,7 @@
     implementation group: 'redis.clients', name: 'jedis', version: '3.5.2'
     // Servicios Google
     implementation 'com.google.android.gms:play-services-location:18.0.0'
+    implementation 'com.google.android.gms:play-services-nearby:17.0.0'
     //implementation 'androidx.multidex:multidex:2.0.1'
     testImplementation 'junit:junit:4.12'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
Index: app/src/main/java/com/example/appcovid/model/DeviceList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appcovid.model;\r\n\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothDevice;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.util.Log;\r\n\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\n\r\nimport java.net.NetworkInterface;\r\nimport java.net.SocketException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class DeviceList {\r\n    private ArrayList<DeviceItem> deviceItemList;\r\n    private FirebaseDatabase mDatabase;\r\n    private DatabaseReference mRef;\r\n\r\n    public DeviceList(BluetoothAdapter bTAdapter) {\r\n\r\n        getMacAddress();\r\n        if (bTAdapter != null) {\r\n            deviceItemList = new ArrayList<DeviceItem>();\r\n\r\n            // Conexion a la base de datos FireBase\r\n            mDatabase = FirebaseDatabase.getInstance(\"https://fctdam-45f92-default-rtdb.europe-west1.firebasedatabase.app/\");\r\n            mRef = mDatabase.getReference();\r\n            //mRef.setValue(getMacAddress());\r\n\r\n            Set<BluetoothDevice> pairedDevices = bTAdapter.getBondedDevices();\r\n            if (pairedDevices.size() > 0) {\r\n                for (BluetoothDevice device : pairedDevices) {\r\n                    DeviceItem newDevice = new DeviceItem(device.getAddress(), \"false\");\r\n                    deviceItemList.add(newDevice);\r\n                }\r\n            }\r\n\r\n            // If there are no devices, add an item that states so. It will be handled in the view.\r\n            if (deviceItemList.size() == 0) {\r\n                deviceItemList.add(new DeviceItem(\"\", \"false\"));\r\n            }\r\n        } else {\r\n            // TODO Controlar error dispositivo no tiene BT\r\n        }\r\n    }\r\n\r\n    public final BroadcastReceiver bReciever = new BroadcastReceiver() {\r\n        public void onReceive(Context context, Intent intent) {\r\n            String action = intent.getAction();\r\n            if (BluetoothDevice.ACTION_FOUND.equals(action)) {\r\n                Log.d(\"DEVICELIST\", \"Bluetooth device found\\n\");\r\n                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\r\n                // Create a new device item\r\n                DeviceItem newDevice = new DeviceItem(device.getAddress(), \"false\");\r\n                deviceItemList.add(newDevice);\r\n                Log.d(\"MAC\", newDevice.getmAddress());\r\n\r\n                //mRef = mDatabase.getReference().child(getMacAddress());\r\n                // Set valores a la Base de Datos\r\n                //mRef.setValue(getMacAddress());\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    public void getMacAddress(){\r\n        /*try {\r\n            List<NetworkInterface> networkInterfaceList = Collections.list(NetworkInterface.getNetworkInterfaces());\r\n            String stringMac = \"\";\r\n\r\n            for (NetworkInterface networkInterface : networkInterfaceList) {\r\n                if (networkInterface.getName().equalsIgnoreCase(\"wlon0\")) {\r\n                    for (int i = 0 ;i <networkInterface.getHardwareAddress().length; i++) {\r\n                        String stringMacByte = Integer.toHexString(networkInterface.getHardwareAddress()[i]& 0xFF);\r\n                        if (stringMacByte.length() == 1) {\r\n                            stringMacByte = \"0\" +stringMacByte;\r\n                        }\r\n                        stringMac = stringMac + stringMacByte.toUpperCase() + \":\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            return stringMac;\r\n        } catch (SocketException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return  \"0\";*/\r\n        try {\r\n        List<NetworkInterface> networkInterfaceList = Collections.list(NetworkInterface.getNetworkInterfaces());\r\n        for (NetworkInterface networkInterface : networkInterfaceList) {\r\n            Log.d(\"MAC2\", networkInterface.getName());\r\n        }\r\n        } catch (SocketException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // TODO: Si tiene conexion BT con otro dispositivo durante mas de 15 min, guardar IDs y fecha en la base de datos\r\n    //  (el otro dispositivo tiene que tener la APP también)\r\n}\r\n\r\n\r\n\r\n\r\n/*import android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothDevice;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.util.Log;\r\n\r\nimport java.net.NetworkInterface;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Set;*/\r\n\r\n//import redis.clients.jedis.Jedis;\r\n\r\n/*import io.lettuce.core.RedisClient;\r\nimport io.lettuce.core.api.StatefulRedisConnection;\r\nimport io.lettuce.core.api.sync.RedisCommands;*/\r\n\r\n/*public class DeviceList {\r\n    private ArrayList<DeviceItem> mDeviceItemList;\r\n    private BluetoothAdapter mBluetoothAdapter;\r\n    private Jedis jedis;\r\n    //private RedisClient mRedisClient;\r\n\r\n    public DeviceList(BluetoothAdapter bTAdapter) {\r\n        mDeviceItemList = new ArrayList<DeviceItem>();\r\n        mBluetoothAdapter = bTAdapter;\r\n        //jedis = new Jedis(\"83.38.116.69\", 6278);\r\n        //mRedisClient = RedisClient.create(\"redis://XJ37InyXOd@83.38.116.69:6278/0\");\r\n\r\n        Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();\r\n        if (pairedDevices.size() > 0) {\r\n            for (BluetoothDevice device : pairedDevices) {\r\n                DeviceItem newDevice= new DeviceItem(device.getAddress(),\"false\");\r\n                mDeviceItemList.add(newDevice);\r\n            }\r\n        }\r\n\r\n        // If there are no devices, add an item that states so. It will be handled in the view.\r\n        if(mDeviceItemList.size() == 0) {\r\n            mDeviceItemList.add(new DeviceItem(\"\", \"false\"));\r\n        }\r\n    }\r\n\r\n    public final BroadcastReceiver bReciever = new BroadcastReceiver() {\r\n        public void onReceive(Context context, Intent intent) {\r\n            String action = intent.getAction();\r\n            if (BluetoothDevice.ACTION_FOUND.equals(action)) {\r\n                Log.d(\"DEVICELIST\", \"Bluetooth device found\\n\");\r\n                // BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);\r\n                // Create a new device item\r\n                //DeviceItem newDevice = new DeviceItem(device.getAddress(), \"false\");\r\n                //mDeviceItemList.add(newDevice);\r\n\r\n                //StatefulRedisConnection<String, String> connection = mRedisClient.connect();\r\n                //RedisCommands<String, String> syncCommands = connection.sync();\r\n                //syncCommands.lpush(mBluetoothAdapter.getAddress(), newDevice.getmAddress());\r\n                //connection.close();\r\n\r\n                //jedis.lpush(\"Prueba\", newDevice.getmAddress());\r\n\r\n                //final MyTask con = new MyTask();\r\n                //con.execute();\r\n\r\n                /*con.doInBackground(newDevice.getmAddress());\r\n                Log.d(\"MAC\", newDevice.getmAddress());*/\r\n\r\n/*\r\n                // TODO Primero comprobar si ya existe el dispositivo en la lista\r\n                Log.d(\"-MIMAC-\", mBluetoothAdapter.getAddress());\r\n                //Log.d(\"MAC\", newDevice.getmAddress());\r\n            }\r\n            //mRedisClient.shutdown();\r\n            jedis.close();\r\n        }\r\n\r\n\r\n        /*class MyTask extends AsyncTask<Void, Void, String> {\r\n            @Override\r\n            protected String doInBackground(Void... arg0) {\r\n                jedis = new Jedis(\"83.38.116.69\", 6278);\r\n\r\n                DeviceItem newDevice = new DeviceItem(device.getAddress(), \"false\");\r\n                mDeviceItemList.add(newDevice);\r\n\r\n                jedis.lpush(\"Prueba\", arg0);\r\n                return \"exito\";\r\n            }\r\n        }\r\n\r\n    };\r\n/*\r\n    // TODO: Si tiene conexion BT con otro dispositivo durante mas de 15 min, guardar IDs y fecha en la base de datos\r\n    //  (el otro dispositivo tiene que tener la APP también)\r\n}*/\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/appcovid/model/DeviceList.java	(revision 5aa5a294a9a0fc1e204e077de7a61d4fbd1fb617)
+++ app/src/main/java/com/example/appcovid/model/DeviceList.java	(date 1619955622024)
@@ -5,6 +5,7 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.os.ParcelUuid;
 import android.util.Log;
 
 import com.google.firebase.database.DatabaseReference;
@@ -56,6 +57,9 @@
             if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                 Log.d("DEVICELIST", "Bluetooth device found\n");
                 BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
+                /*for(ParcelUuid parcelUuid : device.getUuids()) {
+                    Log.d("PARCEL", parcelUuid.getUuid().toString());
+                }*/
                 // Create a new device item
                 DeviceItem newDevice = new DeviceItem(device.getAddress(), "false");
                 deviceItemList.add(newDevice);
